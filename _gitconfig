[user]
    name = amit-bakhru
    email = amit@area1security.com
    signingkey = 68C5595E
[branch]
        autosetuprebase=always
[push]
        default = current
#[remote "origin"]
       #fetch = +refs/heads/*:refs/remotes/origin/*

[alias]
        up = pull origin
        # View the current working tree status using the short format
        st = status -s
        di = diff
        co = checkout
        ci = commit
        br = branch
        cherry = cherry-pick
        # View abbreviated SHA, description, and history graph of the latest 20 commits
        l = log --pretty=oneline -n 30 --graph --abbrev-commit
        t = log --oneline --graph --decorate --all
        lol = log --graph --decorate --pretty=oneline --abbrev-commit
        lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
        # Show the diff between the latest commit and the current state
        d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
        # `git di $number` shows the diff between the state `$number` revisions ago and the current state
        di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
        # Pull in remote changes for the current repository and all its submodules
        p = !"git pull; git submodule foreach git pull origin master"
        # Clone a repository including all submodules
        c = clone --recursive
        # Commit all changes
        ca = !git add -A && git commit -av
        # Switch to a branch, creating it if necessary
        go = checkout -B
        # Show verbose output about tags, branches or remotes
        tags = tag -l
        branches = branch -a
        remotes = remote -v
        # Credit an author on the latest commit
        credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
        # Interactive rebase with the given number of latest commits
        reb = "!r() { git rebase -i HEAD~$1; }; r"
        # Find branches containing commit
        fb = "!f() { git branch -a --contains $1; }; f"
        # Find tags containing commit
        ft = "!f() { git describe --always --contains $1; }; f"
        # Find commits by source code
        fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
        # Find commits by commit message
        fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
        # Remove branches that have already been merged with master
        dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
        ls = ls-files
        fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
        squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' â€“

[mergetool]
        keepBackup = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[core]
	# Use custom `.gitignore`
	excludesfile = /Users/bakhra/.gitignore_global
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,indent-with-non-tab,trailing-space
	pager = diff-so-fancy | less --tabs=4 -RFX
[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[http]
    sslverify = false
[credential]
	helper = osxkeychain
[help]
	autocorrect = 1
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[commit]
	gpgsign = false
[gpg]
	program = gpg

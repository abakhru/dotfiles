- list branches & check which branch we are working on
git branch
git branch -r

- create branch
git branch <amit-foo>
git co -b <amit-foo>
Eg: git branch amit-test

- to change branch
git checkout amit-foo

- to update the master branch to latest version
git checkout master
git pull

- branches nomenclature
de* named branches are defect related
us* named branches are user stories related
others are peoples named rellated

- commit changes
-- add a new file or change any existing file
git add <new_file_name>

-- commit changes to an existing file
git commit -m "message" <filename>
git commit -a -m "adding a file and editing another file" -v

- uncommit a local commit
git reset --soft HEAD^ (if file already in git)
git reset <filename> (if file not already in git)
git reset --soft HEAD~11 (uncommit locally staged commit)

- push a new branch onto master repo
git push -u origin de1625-autotune-consume-stqa-disable-v1

- to check the actual status of changes
git status/ git st

- diff the changes compared to master
git diff --color --oneline

- save uncommit changes
git stash
git pull
git stash pop

git stash list
git stash clear

- you can created command aliased in ~/snr/.git/config file

[alias]
	checkout = co
	status = st
	diff = di --color-words
	pull = up

- to check if ssh auth key is being used through ssh session
ssh-add -l
(this should list the auth key if its working fine, if it doesn't display the ssh-key then checkins will FAIL

- to revert particular file to master version
git checkout/co -- 5-qa/python/stqa/silvertap/testdata/basic_test.py/universal_conf.py

- get the changelog in onelines
git log
git log --one-line
git log --oneline
git log --color --oneline

- always use git url for push/pull, http is read-only url and ALWAYS work on snr branch NEVER on master
git clone git@github.silvertailsystems.com:ana/main3 ana

- check the local changes compared to the remote origin
git status

- list the changed files in your repo
git ls-files -m (modified files)
git ls-files -d (deleted files)
git ls -o (non-added files)

- add the changed/modified files in your repo
git ls -m|xargs git add
git ls -d|xargs git rm

- tar all the modified files in your repo (doesn't include new files)
git ls -m|xargs tar cvf ~/tmp/t.tar

- always rebase your brach onto master before push
git rebase --onto develop develop

- autosquash the fixups
git rebase -i --autosquash <last merged branch commit id>

- delete remote branch
git push origin :<branch_name>

- ammend the author of a commit message:
1. run git rebase -i <sha1 or ref of starting point>
2. mark all commits that you want to change with edit (or e)

loop the following two commands until you have processed all the commits:

3. git commit --amend --reuse-message=HEAD --author="Amit Bakhru <amit.bakhru@rsa.com>"
4. git rebase --continue


fork/pull
=========
- create a fork of the repo
use github ui

# clone the forked repo
git clone https://github.rsa.lab.emc.com/bakhra/launch-esa.git

# configure remotes
git remote add asoc https://github.rsa.lab.emc.com/asoc/launch-esa.git
git remotes -v

# update forked master with MAIN master
git pull --rebase asoc master
git pull

# create branch
git checkout -b <asoc-1234>
git commit -m "blah"
git push -u origin <asoc-1234>

# Team-members create PR based off feature forked branch and forked-master
bakhra/launch-esa/master and bakhra/launch-esa/<asoc-1234>

# feature lead creates a PR based off forked master and MAIN master
asoc/launch-esa/master and bakhra/launch-esa/master

# NOTE:
- each fork owner needs to assign write permission to rsabld user(capthook)
- cross-repo fixup squash/rebase won't be possible, not available right now, maybe later
- same-repo fixup squash/rebase would work
- All jenkin jobs will support running jobs using any fork/asoc repo/branch

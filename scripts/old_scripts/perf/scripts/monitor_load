#!/bin/ksh 

# monitors resources of either load test program instances or
# IM mux instances or IM server instances
# Arg list:
#    type: load || mux || server --> default: load
#    interval: min --> default: 15

trap 'echo "stop monitoring"; pkill sleep; exit' INT KILL

server_memstat=/var/opt/SUNWiim/default/log/server_memstat
mux_memstat=/var/opt/SUNWiim/default/log/mux_memstat

function setType
{

   case $1 in
   [lL][oO][aA][dD] )
   monitorType="load"
   ;;
   [mM][uU][xX] )
   monitorType="mux"
   ;;
   [sS][eE][rR][vV][eE][rR] )
   monitorType="server"
   ;;
   * ) echo "unknown monitor type: $1"
       exit;
       ;;
   esac

}

# set output file
function setOutput
{

if [ "$monitorType" == "load" ]; then

   oFile="./logs/op-monitor"

elif [ "$monitorType" == "mux" ] || [ "$monitorType" == "server" ]; then

   if [ "$OS" == "SunOS" ]; then

      oFile="/var/opt/SUNWiim/default/log/op-monitor"
   else
      oFile="/var/opt/sun/im/default/log/op-monitor"
   fi

fi
}

function getPidlist 
{


if [ "$OS" == "SunOS" ]; then

   if [ "$monitorType" == "load" ]; then
      pidlist=`ps -e -o pid,user,comm | grep latest | cut -b1-5 | xargs echo`
   elif [ "$monitorType" == "mux" ]; then
      pidlist=`ps -e -o pid,user,comm | grep multiplexor | cut -b1-5 | xargs echo`
   elif [ "$monitorType" == "server" ]; then
#pidlist=`ps -e -o pid,user,comm | grep iimuser | cut -b1-5 | xargs echo`
      pidlist="`cat /var/opt/SUNWiim/default/log/xmppd.pid` `cat /var/opt/SUNWiim/default/log/mux.pid`"
   fi

elif [ "$OS" == "Linux" ]; then

   if [ "$monitorType" == "load" ]; then
      pidlist=`ps -e -o pid,user,comm | grep latest | cut -b1-5 | xargs echo | sed -e 's/ /, -p/g'`
   elif [ "$monitorType" == "mux" ]; then
      pidlist=`ps -e -o pid,user,comm | grep multiplexor | cut -b1-5 | xargs echo`
   elif [ "$monitorType" == "server" ]; then
#pidlist=`ps -e -o pid,user,comm | grep iimuser | cut -b1-5 | xargs echo | sed -e 's/ /, -p/g'`
      pidlist="`cat /var/opt/sun/im/default/log/xmppd.pid` `cat /var/opt/sun/im/default/log/mux.pid`"
   fi
fi

}

# monitor resource and network connections
function doMonitor {

   print - "\n --- doMonitor start ---" >> $oFile
   date >> $oFile

   getPidlist

   print - "\n --- resource check start ---\n" >> $oFile

   if [ "$OS" == "SunOS" ]; then

      prstat -p"$pidlist" -s rss 1 1 >> $oFile 
      no_user=`grep accepted /var/opt/SUNWiim/default/log/mux.* | wc -l` 
      time=`date '+20%y%m%d%H%M%S'`
      echo >> $oFile
      echo Accepted `grep -i accepted mux.log* | wc -l` >> $oFile
      echo Removed `grep -i closed mux.log* | grep -v -i Exception | wc -l` >> $oFile
# buggy :-)
#      echo Actual no. of Users logged in `expr `grep -i accepted mux.log* | wc -l` - `grep -i closed mux.log* | grep -v -i Exception | wc -l`` >> $oFile
      echo >> $oFile
      echo `grep "Opened socket to server" mux.*` >> $oFile
      echo `grep accepted xmppd.log* | grep 45222` >> $oFile
      echo >> $oFile

   elif [ "$OS" == "Linux" ]; then

      top -b -p"$pidlist" -n1 -d1 >> $oFile 
      no_user=`grep accepted /var/opt/sun/im/default/log/mux.* | wc -l` 
      time=`date '+20%y%m%d%H%M%S'`
      echo >> $oFile
      echo Accepted `grep -i accepted mux.log* | wc -l` >> $oFile
      echo Removed `grep -i closed mux.log* | wc -l` >> $oFile
      echo >> $oFile
   fi

   print - "\n --- resource check done ---" >> $oFile

   print - "\n --- doMonitor done ---" >> $oFile
   date >> $oFile

}

export PATH=$PATH:/usr/bin

OS=`uname -s`

setType $1

if [ $# == 2 ]; then

   delay=`expr $2 \* 60 2>/dev/null`
else

   delay=2
   delay=`expr $delay \* 60 2>/dev/null`
fi

setOutput

while true
do
   pidlist=""
   doMonitor;
   sleep $delay
done

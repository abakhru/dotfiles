#
#NOTE: For client-cert authentication to work, SSL certificate HAS to be signed by a valid CA
#
cd /opt/sun/comms/messaging64/sbin
echo "password" > /tmp/.pwd.txt

#Generate the cert db
./msgcert generate-certDB
./msgcert list-certs -W /tmp/.pwd.txt

#Remove self-signed Server-Cert
./msgcert remove-cert -W /tmp/.pwd.txt Server-Cert

#Request a new server-cert to be signed by CA
./msgcert request-cert -W /tmp/.pwd.txt --name `hostname`.red.iplanet.com --org "Sun Microsystems, Inc." --org-unit Comms --city SCA --s
tate CA --country US -F ascii -o /tmp/`hostname`-cert-req.txt

#Import cacert.pem  to cert-db
./msgcert add-cert -W /tmp/.pwd.txt -C CA-Cert /opt/sun/comms/messaging64/sbin/cacert.pem

#Get the cert-req.txt signed from CA
openssl ca -config openssl.cnf.SSL_Server -out `hostname`-cert.pem -infiles `hostname`-cert-req.txt

# Import the CA signed server-cert to the certdb
./msgcert add-cert -W /tmp/.pwd.txt Server-Cert /opt/sun/comms/messaging64/sbin/`hostname`-cert.pem

# Create user cert-request
openssl req -new -nodes -out neo32-req.pem -keyout private/neo32-key.pem -config openssl.cnf

# Approve user cert-request
openssl ca -config openssl.cnf -out neo32-cert.pem -infiles neo32-req.pem

# To Export user-signed certificated into pkcs12 format:
openssl pkcs12 -export -in neo32-cert.pem -inkey private/neo32-key.pem -certfile neo32-cert.pem -name neo32@red.iplanet.com -out neo32-cert.p12

#Ftp the neo*-cert.pk12 files to the desktop & import it into Thunderbird
# Add the certificate into the 

# To list all the certs in NSS cert db
/opt/sun/private/bin/certutil -L -d /opt/sun/comms/messaging64/config/

# To import pkcs12 format user-cert.p12 file into NSS cert db :
/opt/sun/private/bin/pk12util -i /tmp/amit3-cert.p12 -d /opt/sun/comms/messaging64/config/
# For Example:

#[root@dianthos /opt/sun/comms/messaging64/sbin]# /opt/SUNWappserver/lib/pk12util -i /tmp/amit3-cert.p12 -d /opt/sun/comms/messaging64/config/
#Enter Password or Pin for "NSS Certificate DB":
#Enter password for PKCS12 file:
#pk12util: PKCS12 IMPORT SUCCESSFUL

###########################CERTUTIL commands##################
#In both cases, it is wise to modify the admin's environment as follows:
#  ~/.bashrc:  export NSS_DEFAULT_DB_TYPE="sql"
#  ~/.cshrc:   setenv NSS_DEFAULT_DB_TYPE "sql"
# The "certutil" and "pk12util" tools necessary to manage certificates default to only looking at the legacy format.  This change makes them work with the new format even if the admin forgets the "sql:" on the "-d" option.

export NSS_DEFAULT_DB_TYPE="sql"

#will migrate DBs from cert8.db/key3.db/secmod.db to cert9.db/key4.db/pkcs12.txt
/opt/sun/private/bin/certutil -d sql:/opt/sun/comms/messaging64/config -X -L
/opt/sun/private/bin/certutil --merge --source-dir /opt/sun/comms/messaging64/config/ -d /opt/sun/comms/messaging64/config/

# To create an empty NSS cert8/9.db 
certutil -N -d . -f /opt/certs/.pwd.txt

#To list all certificates
/opt/sun/private/bin/certutil -d /opt/sun/comms/messaging64/config -L

# To create a self-signed certificate
certutil -S -x -n Server-Cert -t "u,u,u" -v 120 -s "CN=greenmeadow.red.iplanet.com,OU=Comms," -d /opt/sun/comms/messaging64/config/ -f /opt/certs/.pwd.txt

#CREATING A CERTIFICATE REQUEST
certutil -R -s "CN=greenmeadow.red.iplanet.com,OU=Comms,L=SCA, ST=CA, C=US" -o /opt/certs/newcerts/greenmeadow-cert-req.pem -d /opt/sun/comms/messaging64/config/ 

#ADDING A CERTIFICATE TO DATABASE
certutil -A -n Server-Cert -t "p,p,p" -i /opt/certs/newcerts/greenmeadow-cert.pem -d /opt/sun/comms/messaging64/config/

#CREATING A SSL-SERVER CERTIFICATE REQUEST using openssl
openssl req -config /opt/certs/openssl.cnf.SSLSERVER -out /opt/certs/newcerts/greenmeadow-cert-req.csr -pubkey -new -keyout /opt/certs/private/greenmeadow-cert.key
# Sign the cert-req using openssl
openssl ca -config /opt/certs/openssl.cnf.SSLSERVER -out /opt/certs/newcerts/greenmeadow-cert.pem -infiles /opt/certs/newcerts/greenmeadow-cert-req.csr
#export the signed cert + cert-key into a p12 file
openssl pkcs12 -export -in /opt/certs/newcerts/greenmeadow-cert.pem -inkey /opt/certs/private/greenmeadow-cert.key -out /opt/certs/newcerts/greenmeadow-cert.p12 -name "Server-Cert"
#import p12 file into cert9.db using pk12util
/opt/sun/private/bin/pk12util -i /opt/certs/newcerts/greenmeadow-cert.p12 -d /opt/sun/comms/messaging64/config/ -k /opt/certs/.pwd.txt -W /opt/certs/.pwd.txt

#ADDING A CERTIFICATE TO THE DATABASE
certutil -A -n Server-Cert -t "p,p,p" -i server-cert.pem -d /opt/sun/comms/messaging64/config/ -f /opt/certs/.pwd.txt

#To delete the key that corresponds to the alias myalias in an NSS soft token, type:
certutil -D -n Server-Cert -d /opt/sun/comms/messaging64/config/ -f /opt/certs/.pwd.txt

# To import CA-CERT 
certutil -A -a -n CA-Cert -i /opt/certs/newcerts/cacert.pem -t CT -d /opt/sun/comms/messaging64/config/ -f /opt/certs/.pwd.txt

# To import crl in binary format into cert9.db
crlutil -I -t 1 -i /opt/certs/crl.der -d /opt/sun/comms/messaging64/config/

# To display the crl info from cert9.db
crlutil -L -d /opt/sun/comms/messaging64/config/ -n CA-Cert

##############################################################################
#keytool usage details for Java Key Store (JKS): APPSERVER SSL CONFIGURATION
##############################################################################

# to list all the certs
keytool -list -v -storepass changeit -keystore cacerts.jks

# To create an empty keystore:
#keytool -genkey -alias foo -keystore keystore.jks -storepass changeit
#keytool -genkey -alias foo -keystore cacerts.jks -storepass changeit

#keytool -delete -alias foo -keystore cacerts.jks -storepass changeit
#keytool -delete -alias foo -keystore keystore.jks -storepass changeit

# To import CA-CERT in cacert.jks store:
keytool -import -trustcacerts -alias "CA-CERT" -file /opt/SUNWappserver/domains/domain1/config/marceau-cacert.der -keystore cacerts.jks -storepass changeit

# To import signed server-cert in keystore.jks:
#* first export the Server-Cert from ms cert9.db :
pk12util -o dianthos-Server-Cert.p12 -n Server-Cert -k /opt/certs/.pwd.txt -w /opt/certs/.pwd.txt -d /opt/sun/comms/messaging64/config/
#changeit/changeit

#* keytool is NOT able to import the private key in jks keystore, but it does consider p12 file as another PKCS12 type keystore, so below we use this feature to import the p12 file(which contains certificate and private/public keypair) into existing keystore.jks, as another keystore of type pkcs12
keytool -importkeystore -srckeystore dianthos-Server-Cert.p12 -destkeystore keystore.jks -srcstoretype PKCS12 -deststorepass changeit -srcstorepass password -destkeypass changeit -alias server-cert

####################################################################################
#For configuring Directory to work in SSL mode
####################################################################################

# TO list the ds certs
certutil -L -d . -P slapd-

#change ds nss password
/opt/SUNWdsee/ds6/bin/dsadm set-flags /var/opt/SUNWdsee/dsins1 cert-pwd-prompt=on

#import CA-cert to ds certdb
certutil -A -a -n CA-Cert -i /tmp/cacert.pem -t CT -d . -P slapd- -f /tmp/.pwd.txt 

#export the Server-Cert with key in p12 form from ms cert9.db
pk12util -o greenmeadow-Server-Cert.p12 -n Server-Cert -d /opt/sun/comms/messaging64/config/

#then import server-cert to ds certdb
pk12util -i /opt/sun/comms/messaging64/config/greenmeadow-Server-Cert.p12 -d . -P slapd-

###########################
#CRL and cert revokation commands
################################

# display the certificate details
     openssl x509 -in cert.pem -noout -text

# convert pem cert to der format
     openssl x509 -in caCert.pem -outform DER -out caCert.der

#An empty CRL that is signed by the CA can be generated with the command
	openssl ca -config openssl.cnf -gencrl -out crl.pem

#If you omit the -crldays option then the default_crl_days value (30 days) specified in openssl.cnf is used.

#If you prefer the CRL to be in binary DER format then this conversion can be achieved with
     openssl crl -in crl.pem -outform DER -out cert.crl

# A specific user certificate stored in the file host.pem is revoked with the command
     openssl ca -config openssl.cnf -revoke /space/smime/newcerts/duncan1-cert.pem

# Next the CRL file must be updated
     openssl ca -config openssl.cnf -gencrl -out crl.pem

# The content of the CRL file can be listed with the command
     openssl crl -in crl.pem -noout -text

# in the case of a base64 CRL, or alternatively for a CRL in DER format
     openssl crl -inform DER -in cert.crl -noout -text

# To verify the cert has been revoked:
cat ./newcerts/cacert.pem ./crl.pem > ./revoke.pem
openssl verify -CAfile ./revoke.pem -crl_check cerficate.crt

# To get DOD crl
wget http://crl.nit.disa.mil/crl/DODOMEMAILCA_20.crl

# To enable dynamic CRL support in glassfish add the following in domain.xml file:
        <jvm-options>-Dcom.sun.net.ssl.checkRevocation=true</jvm-options>
        <jvm-options>-Dcom.sun.security.enableCRLDP=true</jvm-options>
